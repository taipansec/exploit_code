'''
    File name: web_requester.py
    Author: Y.B
    Date created: 4/20/2018
    Date last modified: 1/30/2023
    Python Version: 3
    Description: This python script helps you to make requests on urls by focusing only on the essential things.
                 You can add a proxy if needed (e.g. send the requests to burp).
'''

import requests
import sys

from colorama import Fore, Back, Style

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

def format_text(title, item):
    cr = '\r\n'
    section_break = cr + "*" * 20 + cr
    item = str(item)
    text = Style.BRIGHT + Fore.RED + title + Fore.RESET + section_break + item + section_break
    return text;

inp = raw_input("Do you want to set a proxy? ")

proxies = {}

if inp == "yes":
    pr = raw_input("Enter the protocol type (http/https) and the proxy in the form PROTOCOL://IP:PORT [http, http://127.0.0.1:8080] -  (enter q to quit): ")
    k, v = pr.split(',')
    proxies[k] = v.strip()
    print proxies

    hd = raw_input("Do you need to bypass WAF forbidden IPs? ")

    if hd == "yes":
        bpip = raw_input("If you want to setup a specific IP/host enter it here or q to go with default: ")
        if bpip != "q":
            headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.70',
            'X-Forwarded-For': bpip,
            'X-Originating-IP': bpip,
            'X-Remote-IP': bpip,
            'X-Remote-Addr': bpip,
            'X-Client-IP': bpip
            }
        else:
            headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.70',
            'X-Forwarded-For': '127.0.0.1',
            'X-Originating-IP': '127.0.0.1',
            'X-Remote-IP': '127.0.0.1',
            'X-Remote-Addr': '127.0.0.1',
            'X-Client-IP': '127.0.0.1'
            }
    else:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.1518.70',
}
    r = requests.get(sys.argv[1], verify=False, headers=headers, proxies=proxies)
else:
    r = requests.get(sys.argv[1], verify=False, headers=headers)

print format_text('Status code is: ', r.status_code)
print format_text('Headers is: ', r.headers)
print format_text('Cookies is: ', r.cookies)
# print format_text('Text is: ', r.text)
